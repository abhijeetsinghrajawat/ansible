# What is ansible?

Ansible is an open-source IT automation and configuration management tool.
It helps to automate:

Provisioning (setting up servers, VMs, or cloud infrastructure),
Configuration management (installing software, managing settings),
Application deployment (deploying code, restarting services),
Orchestration (coordinating multiple systems at once),
Continuous delivery (integrating with CI/CD pipelines).

#Important:::::::::::::

Ansible allows you to define the desired state of your infrastructure and systems using simple, human-readable YAML files called Playbooks.
it is:

Agentless: You don’t need to install any agent on remote machines. It uses SSH to connect.
Declarative: You define what you want, not how to do it.
Idempotent: Running the same Ansible play multiple times won't change the system if it's already in the desired state.

# Why Do We Use Ansible?

✅ 1. Automation
Avoid repetitive manual tasks like:
Installing packages
Configuring files
Starting/stopping services

✅ 2. Consistency
Ensure the same configuration is applied across all environments: dev, test, prod.

✅ 3. Scalability
Easily manage 10s to 1000s of servers without changing your playbooks.

✅ 4. Speed
Provision full infrastructure quickly compared to manual setup.

✅ 5. Agentless
No need to install software on each managed host. Just ensure SSH access and Python.

# Core Components of Ansible ::::::::::::::::::::

| Component     | Description                                                                                  |
| ------------- | -------------------------------------------------------------------------------------------- |
| **Inventory** | A list of hosts (servers) Ansible manages. Stored in a `.ini`, `.yaml`, or `.json` file.     |
| **Playbook**  | YAML file containing a series of "plays" to run on hosts.                                    |
| **Play**      | A mapping between a group of hosts and tasks to execute.                                     |
| **Task**      | A single unit of work (e.g., install a package, copy a file).                                |
| **Module**    | A reusable Ansible component used to perform tasks (`yum`, `apt`, `copy`, `template`, etc.). |
| **Role**      | A way to organize playbooks and tasks into reusable components.                              |
| **Variable**  | Values that can be reused and changed dynamically.                                           |
| **Handler**   | Tasks triggered only when a change occurs (e.g., restart service if config changed).         |

# Sample Folder Structure :::::::::::::::::::::

project/
│
├── inventory.ini
├── playbook.yml
├── roles/
│   └── nginx/
│       ├── tasks/
│       │   └── main.yml
│       └── templates/
│           └── nginx.conf.j2

# Sample Inventory File (inventory.ini) :::::::::::::

[web]
192.168.1.10
192.168.1.11

[db]
192.168.1.12

# Sample Playbook (deploy-nginx.yml)

- name: Install and start NGINX on web servers
  hosts: web
  become: yes

  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present
      when: ansible_os_family == "Debian"

    - name: Start nginx
      service:
        name: nginx
        state: started
        enabled: yes

# Common Use Cases ::::::::::::::::::::::::

Provisioning EC2 instances or VMs
Installing software like Apache, MySQL, Docker
Managing users and permissions
Deploying code from Git
Rolling updates in zero-downtime deployments
Automating server hardening and security patching

# How Ansible Works (Behind the Scenes)::::::::::::::::::

You run ansible-playbook playbook.yml
Ansible reads the inventory, connects to hosts over SSH.
Executes tasks in order using modules.
Applies changes only if needed (idempotency).
Tracks state temporarily in memory (not stored anywhere unless you log it).


# Ansible vs. Other Tools

| Feature           | Ansible        | Puppet          | Chef          | Terraform         |
| ----------------- | -------------- | --------------- | ------------- | ----------------- |
| Language          | YAML           | DSL (Ruby-like) | Ruby DSL      | HCL               |
| Agentless         | ✅ Yes          | ❌ Agent-based   | ❌ Agent-based | ✅ Yes             |
| Config Management | ✅ Yes          | ✅ Yes           | ✅ Yes         | ❌ No (infra only) |
| Infra Provision   | ❌ (basic only) | ❌               | ❌             | ✅ Yes             |

✅ We can combine Terraform for provisioning and Ansible for configuration.


# In DevOps Pipelines ::::::::::::::

Ansible is often used in CI/CD pipelines with:

Jenkins
GitLab CI
Azure DevOps
GitHub Actions

